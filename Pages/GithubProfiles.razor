@page "/github/profiles"
@using System.ComponentModel.DataAnnotations;
@inject HttpClient Http;

<h1>Github Profiles</h1>

<EditForm Model="@AddProfileModel" OnValidSubmit="@AddProfile">
    <DataAnnotationsValidator />
    <ValidationsSummary />

    <div class="form-group">
        <InputText id="name" class="form-control" bind-Value="@AddProfileModel.Name" />
    </div>

    <button type="submit">Add</button>
</EditForm>

<div class="row">
    @foreach(var profile in Profiles)
    {
        <div class="col">
            <div class="card" style="width: 18rem;">
                <img src="@profile.Avatar_url" class="card-img-top" alt="Avatar">
                <div class="card-body">
                    <h5 class="card-title">@profile.Name</h5>
                    <p class="card-text">@profile.Bio</p>
                    <a target="_blank" href="@profile.Url" class="btn btn-primary">View on GitHub</a>
                    <a href="#" class="btn btn-danger" onclick=@(() => RemoveProfile(profile.Id))>Remove</a>
                </div>
            </div>
        </div>
    }
</div>

@functions {
    AddProfileViewModel AddProfileModel = new AddProfileViewModel();
    List<GithubProfileDtoModel> Profiles = new List<GithubProfileDtoModel>();

    private async Task AddProfile()
    {
        var newProfile = await Http.GetJsonAsync<GithubProfileDtoModel>($"https://api.github.com/users/{AddProfileModel.Name}");
        Profiles.Add(newProfile);
        AddProfileModel.Name = string.Empty;
    }

    private void RemoveProfile(int id)
    {
        Profiles = Profiles.Where(p => p.Id != id).ToList();
    }

    class GithubProfileDtoModel
    {
        public string Name { get; set; }

        public string Avatar_url { get; set; }

        public string Bio { get; set; }

        public string Url { get; set; }

        public int Id { get; set; }
    }

    class AddProfileViewModel
    {
        [Required]
        public string Name { get; set; }
    }
}
